import Foundation
let arraySize = 20
let maxInt = 100
var someInts : [Int]? = Array(repeating: 0, count: arraySize) // якщо викликаєш append то система розширяє масив. +20 елементів - 20 разів переписаний масив. Цією функцією ми просто створюємо один масив потрібного розміру
                              .compactMap{Int.random(in: $0...maxInt)}  // а ось тут ми один раз проходимо по масиву і повертаємо новий масив, ця функція може для оптимізації навіть працювати в багатьох потоках - нам це не важливо, головне - чистий результат
                    
func sortArray(_ intArray: [Int]?, accesing: Bool) -> [Int]? { 
    guard !(intArray?.isEmpty ?? true) else {return intArray} // сумістив перевірки
    return accesing ? intArray?.sorted(by: <) : intArray?.sorted(by: >) // стис обробку - ти не формуєш масив а потім змінюєш порядок елементів а одразу сортуєш в потрібному порядку
}


print("Unsorted")
print(someInts)
print("Sorted accesing")
print(sortArray(someInts, accesing:true))
print("Sorted deccesing")
print(sortArray(someInts, accesing:false))
