//6. Написати функцію що прийматиме масив чисел. Відсортувати елементи в масиві таким чином: 
// якщо число парне - ставити на парне місце, якщо ні - на непарне.

import Foundation
var emptyInts : [Int] = []
var someInts : [Int] = []
for count in 0...20 { // як писав раніше є швидший і компактніший варіант генерації
    someInts.append(Int.random(in: 0...100))
}

func oddEven(_ inputArray : [Int])-> [Int?] { 
 let oddArray = inputArray.filter { $0 % 2 == 1 }
 let evenArray = inputArray.filter { $0 % 2 == 0 }   
 var outArray: [Int?] = []
 var maxCount : Int = (oddArray.count > evenArray.count ? oddArray.count : evenArray.count)
 if maxCount > 0 {
 for i in 1...maxCount { // навіщо так складно? Це слід компактніше зробити
        outArray.append((i > oddArray.count ? nil : oddArray[i-1]))
        outArray.append((i > evenArray.count ? nil : evenArray[i-1]))
        }
    }
 return outArray
}  
// фактично тут йде перевірка. Спробуй уявити складнішу ситуацію що для тесту нам треба проганяти багато варіантів (не лише someInts та emptyInts) а слід кидати пачку масивів і бачити відпрацювання по кожному з них. Можна кожен заганяти так само двома рядками, але ж ти вже розібрався з масивами і їх обробкою...
print(someInts) 
print(oddEven(someInts))

print(emptyInts)
print(oddEven(emptyInts))
